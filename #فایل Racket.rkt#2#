#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 61 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 170 151 240 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1           0 2247 0 17 3 27 #";; PL Project - Spring 2020"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";; NUMEX interpreter"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 25 3 3 #")) "
0 0 17 3 39 #";; so we can put tests in a second file"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46 #";; definition of structures for NUMEX programs"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 30 #";; CHANGE add the missing ones"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"string"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 3 #")  "
0 0 17 3 32 #";; a variable, e.g., (var \"foo\")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"num"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"int"
0 0 25 3 5 #")    "
0 0 24 3 13 #"#:transparent"
0 0 25 3 3 #")  "
0 0 17 3 36 #";; a constant number, e.g., (num 17)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"bool"
0 0 25 3 2 #" ("
0 0 14 3 7 #"boolean"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"plus"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 3 #")  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 3 #")  "
0 0 17 3 22 #";; add two expressions"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"minus"
0 0 25 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 3 #")  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"mult"
0 0 25 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 3 #")  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"div"
0 0 25 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 3 #")  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"andalso"
0 0 25 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 3 #")  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 6 #"orelse"
0 0 25 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 3 #")  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"cnd"
0 0 25 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 2 #"e3"
0 0 25 3 3 #")  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"iseq"
0 0 25 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 3 #")  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"ifnzero"
0 0 25 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 2 #"e3"
0 0 25 3 3 #")  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"ifleq"
0 0 25 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 2 #"e3"
0 0 25 3 1 #" "
0 0 14 3 2 #"e4"
0 0 25 3 3 #")  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"with"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 3 #")  "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"lam"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"nameopt"
0 0 25 3 1 #" "
0 0 14 3 6 #"formal"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 37 #";; a recursive(?) 1-argument function"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"apply"
0 0 25 3 2 #" ("
0 0 14 3 6 #"funexp"
0 0 25 3 1 #" "
0 0 14 3 6 #"actual"
0 0 25 3 8 #")       "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 23 #";; function application"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"munit"
0 0 25 3 11 #"   ()      "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 39 #";; unit value -- good for ending a list"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"ismunit"
0 0 25 3 2 #" ("
0 0 14 3 1 #"e"
0 0 25 3 6 #")     "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 37 #";; if e1 is unit then true else false"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 74
(4
 #";; a closure is not in \"source\" programs; it is what functions eva"
 #"luate to"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"closure"
0 0 25 3 2 #" ("
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 15 3 6 #"letrec"
0 0 25 3 2 #" ("
0 0 14 3 2 #"s1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"s2"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 2 #"s3"
0 0 25 3 1 #" "
0 0 14 3 2 #"e3"
0 0 25 3 1 #" "
0 0 14 3 2 #"e4"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 48 #";; a letrec expression for recursive definitions"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"queue"
0 0 25 3 2 #" ("
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 1 #"q"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 31 #";; it holds several expressions"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"enqueue"
0 0 25 3 2 #" ("
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 1 #"q"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 23 #";; it enqueues e into q"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"dequeue"
0 0 25 3 2 #" ("
0 0 14 3 1 #"q"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 16 #";; it dequeues q"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"extract"
0 0 25 3 2 #" ("
0 0 14 3 1 #"q"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 2 #") "
0 0 17 3 33 #";; it returns queue's top element"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"apair"
0 0 25 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; Problem 1"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 21 #"racketlist->numexlist"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #") ("
0 0 14 3 5 #"munit"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                         [("
0 0 14 3 5 #"list?"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #") ("
0 0 14 3 5 #"apair"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #") ("
0 0 14 3 21 #"racketlist->numexlist"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 42 #"                                         ["
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 44 #"\"racketlist->numexlist: input is not a list\""
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 21 #"numexlist->racketlist"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"munit?"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 2 #") "
0 0 14 3 4 #"null"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                         [("
0 0 14 3 6 #"apair?"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 8 #"apair-e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #") ("
0 0 14 3 21 #"numexlist->racketlist"
0 0 25 3 2 #" ("
0 0 14 3 8 #"apair-e2"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 42 #"                                         ["
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 44 #"\"numexlist->racketlist: input is not a list\""
0 0 25 3 3 #"]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; Problem 2"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #";; lookup a variable in an environment"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";; Complete this function"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"envlookup"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"unbound"
0 0 19 3 1 #" "
0 0 19 3 8 #"variable"
0 0 19 3 1 #" "
0 0 19 3 6 #"during"
0 0 19 3 11 #" evaluation"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 5 #"list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                           ["
0 0 22 3 2 #"#t"
0 0 25 3 2 #" ("
0 0 14 3 9 #"envlookup"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #") "
0 0 14 3 3 #"str"
0 0 25 3 4 #")])]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 10 #"envlookup:"
0 0 19 3 1 #" "
0 0 19 3 3 #"env"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 5 #" list"
0 0 19 3 1 #"\""
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        )"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 60
#";; Complete more cases for other kinds of NUMEX expressions."
0 0 25 29 1 #"\n"
0 0 17 3 65
#";; We will test eval-under-env by calling it directly even though"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";; \""
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 4 #"real"
0 0 17 3 1 #" "
0 0 17 3 48 #"life\" it would be a helper function of eval-exp."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 4 #"var?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 9 #"envlookup"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 10 #"var-string"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 5 #"plus?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 7 #"plus-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 7 #"plus-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 3 #"num"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 8 #"addition"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 11 #" non-number"
0 0 19 3 1 #"\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 17 3 29 #";; CHANGE add more cases here"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 9 #"envlookup"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 5 #"bool?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 9 #"envlookup"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 12 #"bool-boolean"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 8 #"closure?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 1 #"e"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"munit?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 1 #"e"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"apair?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 5 #"apair"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 8 #"apair-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 8 #"apair-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"minus?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 8 #"minus-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 8 #"minus-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 3 #"num"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 11 #"subteaction"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 13 #"to non-number"
0 0 19 3 1 #"\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 5 #"mult?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 7 #"mult-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 7 #"mult-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 3 #"num"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 2 #" ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 13 #"multipliction"
0 0 19 3 1 #" "
0 0 19 3 8 #"applied "
0 0 19 3 2 #"to"
0 0 19 3 11 #" non-number"
0 0 19 3 1 #"\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 4 #"div?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 6 #"div-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 6 #"div-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 3 #"div"
0 0 19 3 1 #" "
0 0 19 3 2 #"by"
0 0 19 3 2 #" 0"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 3 #"num"
0 0 25 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 25 3 2 #" ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 3 #") ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               )"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 3 #"div"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 11 #" non-number"
0 0 19 3 1 #"\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 4 #"neg?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 1 #"v"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"neg-e"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 3 #") ("
0 0 14 3 3 #"num"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 2 #" ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                 [("
0 0 14 3 5 #"bool?"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 12 #"bool-boolean"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 49 #"\"NUMEX neg applied to non-number and non-boolean\""
0 0 25 3 5 #")]))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 8 #"andalso?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 10 #"andalso-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"bool?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 12 #"bool-boolean"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 10 #"andalso-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"bool?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 12 #"bool-boolean"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 7 #"andalso"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 12 #" non-boolean"
0 0 19 3 1 #"\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   )"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 7 #"andalso"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 12 #" non-boolean"
0 0 19 3 1 #"\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 7 #"orelse?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 9 #"orelse-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"bool?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 12 #"bool-boolean"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 9 #"orelse-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"bool?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 12 #"bool-boolean"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 7 #"andalso"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 12 #" non-boolean"
0 0 19 3 1 #"\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   )"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 7 #"andalso"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 12 #" non-boolean"
0 0 19 3 1 #"\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 4 #"cnd?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 6 #"cnd-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"bool?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 12 #"bool-boolean"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 3 #") ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 6 #"cnd-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 6 #"cnd-e3"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 3 #"cnd"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 12 #" non-boolean"
0 0 19 3 1 #"\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 5 #"iseq?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 7 #"iseq-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 7 #"iseq-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 3 #") ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"bool"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #")("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                 [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"bool?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 3 #") ("
0 0 14 3 5 #"bool?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 4 #")) ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 12 #"bool-boolean"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #") "
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 12 #"bool-boolean"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 5 #"))))]"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                 [("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 3 #") ("
0 0 14 3 5 #"bool?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"bool?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 3 #") ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"bool"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ["
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 4 #"iseq"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 10 #"non-number"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 12 #" non-boolean"
0 0 19 3 1 #"\""
0 0 25 3 4 #"]))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 8 #"ifnzero?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 10 #"ifnzero-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 3 #") ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 10 #"ifnzero-e3"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 10 #"ifnzero-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 7 #"ifnzero"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 11 #" non-number"
0 0 19 3 1 #"\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"ifleq?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 8 #"ifleq-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 8 #"ifleq-e2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 3 #") ("
0 0 14 3 4 #"num?"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v1"
0 0 25 3 3 #") ("
0 0 14 3 7 #"num-int"
0 0 25 3 1 #" "
0 0 14 3 2 #"v2"
0 0 25 3 4 #")) ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 8 #"ifleq-e4"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 8 #"ifleq-e3"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 5 #"ifleq"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 11 #" non-number"
0 0 19 3 1 #"\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 5 #"with?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 15 3 7 #"with-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 25 3 2 #" ("
0 0 15 3 6 #"with-s"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 15 3 7 #"with-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 15 3 6 #"with-s"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 2 #"v1"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 34 #"\"NUMEX with applied to non-string\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 4 #"lam?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 25 3 2 #" ("
0 0 14 3 11 #"lam-nameopt"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 11 #"lam-nameopt"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 5 #"))) ("
0 0 14 3 7 #"string?"
0 0 25 3 2 #" ("
0 0 14 3 10 #"lam-formal"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 7 #"closure"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 3 #"lam"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 11 #" non-string"
0 0 19 3 1 #"\""
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"apply?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 10 #"funclosure"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 12 #"apply-funexp"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ["
0 0 14 3 9 #"actualpar"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 12 #"apply-actual"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 8 #"closure?"
0 0 25 3 1 #" "
0 0 14 3 10 #"funclosure"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 8 #"lam-body"
0 0 25 3 2 #" ("
0 0 14 3 9 #"closure-f"
0 0 25 3 1 #" "
0 0 14 3 10 #"funclosure"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 11 #"lam-nameopt"
0 0 25 3 2 #" ("
0 0 14 3 9 #"closure-f"
0 0 25 3 1 #" "
0 0 14 3 10 #"funclosure"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 10 #"lam-formal"
0 0 25 3 2 #" ("
0 0 14 3 9 #"closure-f"
0 0 25 3 1 #" "
0 0 14 3 10 #"funclosure"
0 0 25 3 3 #")) "
0 0 14 3 9 #"actualpar"
0 0 25 3 3 #") ("
0 0 14 3 11 #"closure-env"
0 0 25 3 1 #" "
0 0 14 3 10 #"funclosure"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 10 #"lam-formal"
0 0 25 3 2 #" ("
0 0 14 3 9 #"closure-f"
0 0 25 3 1 #" "
0 0 14 3 10 #"funclosure"
0 0 25 3 3 #")) "
0 0 14 3 9 #"actualpar"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 42 #"                                         ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 11 #"lam-nameopt"
0 0 25 3 2 #" ("
0 0 14 3 9 #"closure-f"
0 0 25 3 1 #" "
0 0 14 3 10 #"funclosure"
0 0 25 3 3 #")) "
0 0 14 3 10 #"funclosure"
0 0 25 3 3 #") ("
0 0 14 3 11 #"closure-env"
0 0 25 3 1 #" "
0 0 14 3 10 #"funclosure"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 37 #"\"NUMEX apply applied to non-function\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 4 #"1st?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 1 #"v"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"1st-e"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"apair?"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 8 #"apair-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 3 #"1st"
0 0 19 3 8 #" applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 9 #" non-pair"
0 0 19 3 1 #"\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 4 #"2nd?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 1 #"v"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 5 #"2nd-e"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"apair?"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 8 #"apair-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 3 #"2nd"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 9 #" non-pair"
0 0 19 3 1 #"\""
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 8 #"ismunit?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 1 #"v"
0 0 25 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ismunit-e"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"munit?"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 4 #"bool"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 4 #"bool"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 7 #"letrec?"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"letrec-s1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 4 #")) ("
0 0 14 3 7 #"string?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"letrec-s2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 4 #"str1"
0 0 25 3 2 #" ("
0 0 14 3 9 #"letrec-s1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 4 #")] ["
0 0 14 3 4 #"str2"
0 0 25 3 2 #" ("
0 0 14 3 9 #"letrec-s2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 2 #" ("
0 0 14 3 9 #"letrec-e3"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 4 #"str2"
0 0 25 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 25 3 2 #" ("
0 0 14 3 9 #"letrec-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 4 #"str1"
0 0 25 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 25 3 2 #" ("
0 0 14 3 9 #"letrec-e1"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #") ("
0 0 14 3 9 #"letrec-e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 36 #"\"NUMEX letrec applied to non-string\""
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 22 3 2 #"#t"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 2 #" ("
0 0 14 3 6 #"format"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"bad"
0 0 19 3 1 #" "
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 11 #"expression:"
0 0 19 3 3 #" ~v"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 16 #";; Do NOT change"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 14 #"eval-under-env"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 4 #"null"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; Problem 3"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ifmunit"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 2 #"e3"
0 0 25 3 2 #") "
0 0 19 3 7 #"\"CHANGE"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"with*"
0 0 25 3 1 #" "
0 0 14 3 2 #"bs"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 2 #") "
0 0 19 3 7 #"\"CHANGE"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"ifneq"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 2 #"e3"
0 0 25 3 1 #" "
0 0 14 3 2 #"e4"
0 0 25 3 2 #") "
0 0 19 3 7 #"\"CHANGE"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; Problem 4"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"numex-filter"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"CHANGE"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"numex-all-gt"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"with"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"filter"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 12 #"numex-filter"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 19 3 1 #"\""
0 0 19 3 6 #"CHANGE"
0 0 19 3 2 #" ("
0 0 19 3 6 #"notice"
0 0 19 3 1 #" "
0 0 19 3 6 #"filter"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 3 #"now"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 5 #"scope"
0 0 19 3 2 #")\""
0 0 25 3 2 #"))"
0           0
